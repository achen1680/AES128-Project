$date
	Wed Aug 28 14:46:18 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module gen_key_tb $end
$var wire 128 ! key_out [127:0] $end
$var reg 1 " clk $end
$var reg 128 # key_in [127:0] $end
$var reg 4 $ round [3:0] $end
$scope module test $end
$var wire 1 " clk $end
$var wire 128 % key_in [127:0] $end
$var wire 4 & round [3:0] $end
$var wire 128 ' temp_key [127:0] $end
$var wire 32 ( temp [31:0] $end
$var wire 32 ) rotated_col4 [31:0] $end
$var wire 32 * col4 [31:0] $end
$var wire 32 + col3 [31:0] $end
$var wire 32 , col2 [31:0] $end
$var wire 32 - col1 [31:0] $end
$var reg 128 . key_out [127:0] $end
$scope function rcon $end
$var reg 4 / round [3:0] $end
$upscope $end
$scope function rotate $end
$var reg 32 0 col [31:0] $end
$upscope $end
$scope module first $end
$var wire 1 " clk $end
$var wire 8 1 col [7:0] $end
$var wire 8 2 subbed [7:0] $end
$var reg 8 3 temp [7:0] $end
$upscope $end
$scope module fourth $end
$var wire 1 " clk $end
$var wire 8 4 col [7:0] $end
$var wire 8 5 subbed [7:0] $end
$var reg 8 6 temp [7:0] $end
$upscope $end
$scope module second $end
$var wire 1 " clk $end
$var wire 8 7 col [7:0] $end
$var wire 8 8 subbed [7:0] $end
$var reg 8 9 temp [7:0] $end
$upscope $end
$scope module third $end
$var wire 1 " clk $end
$var wire 8 : col [7:0] $end
$var wire 8 ; subbed [7:0] $end
$var reg 8 < temp [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx <
bx ;
b101 :
bx 9
bx 8
b1110110 7
bx 6
bx 5
b101010 4
bx 3
bx 2
b1101100 1
b101010011011000111011000000101 0
bx /
bx .
b10100000111110101111111000010111 -
b10001000010101000010110010110001 ,
b100011101000110011100100111001 +
b101010011011000111011000000101 *
b1101100011101100000010100101010 )
bx (
bx '
bx &
b10100000111110101111111000010111100010000101010000101100101100010010001110100011001110010011100100101010011011000111011000000101 %
bx $
b10100000111110101111111000010111100010000101010000101100101100010010001110100011001110010011100100101010011011000111011000000101 #
0"
bx !
$end
#10
b11110000110000101001010111110010011110001001011010111001010000110101101100110101100000000111101001110001010110011111011001111111 '
b1010000 2
b1010000 3
b111000 8
b111000 9
b1101011 ;
b1101011 <
b1010000001110000110101111100101 (
b11100101 5
b11100101 6
1"
#20
b11110010110000101001010111110010011110101001011010111001010000110101100100110101100000000111101001110011010110011111011001111111 '
b1 /
0"
b1 $
b1 &
#30
b11110010110000101001010111110010011110101001011010111001010000110101100100110101100000000111101001110011010110011111011001111111 !
b11110010110000101001010111110010011110101001011010111001010000110101100100110101100000000111101001110011010110011111011001111111 .
1"
#40
0"
